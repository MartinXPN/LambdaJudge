AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: SAM Template for LambdaJudge


Resources:
  # Execution roles
  SyncS3WithEFSRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: SyncNetworkPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DetachNetworkInterface'
                Resource: '*'
        - PolicyName: SyncLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: SyncSecretsPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                Resource: '*'
        - PolicyName: SyncS3Policy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:ListBucket'
                  - 's3:GetBucketLocation'
                  - 's3:GetObjectVersion'
                  - 's3:GetLifecycleConfiguration'
                Resource: '*'
        - PolicyName: SyncEFSPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticfilesystem:ClientMount'
                  - 'elasticfilesystem:ClientRootAccess'
                  - 'elasticfilesystem:ClientWrite'
                  - 'elasticfilesystem:DescribeMountTargets'
                Resource: '*'
  EqualityCheckerRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: EqualityCheckerPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cloudformation:Get*'
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                  - 'logs:DescribeLogGroups'
                  - 'lambda:*'
                  - 'cloudwatch:ListMetrics'
                  - 'cloudwatch:GetMetricData'
                  - 'secretsmanager:GetSecretValue'
                  - 'secretsmanager:DescribeSecret'
                  - 'secretsmanager:ListSecretVersionIds'
                Resource: '*'
  ContestantRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - lambda.amazonaws.com
            Action:
              - 'sts:AssumeRole'
      Policies:
        - PolicyName: ContestantLogPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'logs:CreateLogGroup'
                  - 'logs:CreateLogStream'
                  - 'logs:PutLogEvents'
                Resource: '*'
        - PolicyName: ContestantNetworkPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ec2:CreateNetworkInterface'
                  - 'ec2:DeleteNetworkInterface'
                  - 'ec2:DescribeNetworkInterfaces'
                  - 'ec2:DetachNetworkInterface'
                Resource: '*'
        - PolicyName: ContestantElasticFileSystemPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'elasticfilesystem:ClientMount'
                  # - 'elasticfilesystem:ClientRootAccess'
                  # - 'elasticfilesystem:ClientWrite'
                  - 'elasticfilesystem:DescribeMountTargets'
                Resource: '*'


  # S3 bucket for test cases (zip files)
  LambdaJudgeTestsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: 'lambda-judge-tests-bucket'
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders:
              - "*"
            AllowedMethods:
              - GET
              - PUT
              - HEAD
            AllowedOrigins:
              - "*"


  # VPC, Subnet, EFS config
  # source: https://github.com/aws-samples/aws-lambda-efs-samples/blob/master/1-setup/create-efs-cfn.yml
  JudgeVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 172.31.0.0/16
      EnableDnsHostnames: true
      EnableDnsSupport: true
      Tags:
        - Key: Name
          Value: JudgeVPC

  CodeRunnerPrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.1.0/24
      VpcId: !Ref JudgeVPC
      AvailabilityZone: 'us-east-1a'
      Tags:
        - Key: Name
          Value: CodeRunnerPrivateSubnet


  # source: https://github.com/widdix/aws-cf-templates/blob/master/vpc/vpc-endpoint-s3.yaml
  # source: https://github.com/aws-samples/lambda-event-sources-vpc-setup-example/blob/main/VPCEndpoint.yml
  InternetGateway:
    Type: AWS::EC2::InternetGateway
  GatewayToInternet:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref JudgeVPC
      InternetGatewayId: !Ref InternetGateway

  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref JudgeVPC
      AvailabilityZone: 'us-east-1a'
      CidrBlock: 172.31.3.0/24
      MapPublicIpOnLaunch: true
      Tags:
        - Key: Name
          Value: PublicSubnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      CidrBlock: 172.31.2.0/24
      VpcId: !Ref JudgeVPC
      AvailabilityZone: 'us-east-1a'
      MapPublicIpOnLaunch: false
      Tags:
        - Key: Name
          Value: PrivateSubnet

  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref JudgeVPC
      Tags:
        - Key: Name
          Value: Public Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: GatewayToInternet
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PublicRouteTable

  # VPC Endpoints (Lambda, S3, SecretManager)
  S3VPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      ServiceName: !Sub com.amazonaws.${AWS::Region}.s3
      RouteTableIds:
        - !Ref PublicRouteTable
      VpcEndpointType: Gateway
      VpcId: !Ref JudgeVPC
  SecretManagerVPCEndpoint:
    Type: AWS::EC2::VPCEndpoint
    Properties:
      PrivateDnsEnabled: true
      ServiceName: !Sub com.amazonaws.${AWS::Region}.secretsmanager
      SubnetIds:
        - !Ref PrivateSubnet
      VpcEndpointType: Interface
      VpcId: !Ref JudgeVPC
      SecurityGroupIds:
        - !GetAtt JudgeVPC.DefaultSecurityGroup


  FileSystemResource:
    Type: AWS::EFS::FileSystem
    Properties:
      PerformanceMode: generalPurpose  # generalPurpose | maxIO
      Encrypted: true
      BackupPolicy:
        Status: ENABLED
      FileSystemTags:
        - Key: Name
          Value: JudgeFS
      FileSystemPolicy:
        Version: '2012-10-17'
        Statement:
          - Effect: 'Allow'
            Action:
              - 'elasticfilesystem:ClientMount'
              - 'elasticfilesystem:ClientWrite'
            Principal:
              AWS: '*'

  CodeRunnerMountTarget:
    Type: AWS::EFS::MountTarget
    Properties:
      FileSystemId: !Ref FileSystemResource
      SubnetId: !Ref CodeRunnerPrivateSubnet
      SecurityGroups:
        - !GetAtt JudgeVPC.DefaultSecurityGroup

  AccessPointResource:
    Type: AWS::EFS::AccessPoint
    Properties:
      FileSystemId: !Ref FileSystemResource
      PosixUser:
        Uid: '1000'
        Gid: '1000'
      RootDirectory:
        CreationInfo:
          OwnerGid: '1000'
          OwnerUid: '1000'
          Permissions: '0777'
        Path: '/mnt/efs'


  # Lambda Functions
  SyncS3WithEFS:
    Type: AWS::Serverless::Function # More info about Function Resource: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#awsserverlessfunction
    DependsOn: CodeRunnerMountTarget
    Properties:
      FunctionName: SyncS3WithEFS
      MemorySize: 1769
      Timeout: 60  # 1 min
      Runtime: python3.9
      CodeUri: sync/
      Handler: app.sync_handler
      Role: !GetAtt SyncS3WithEFSRole.Arn
      Events:
        SyncS3TestsWithEFSEvent:
          Type: S3
          Properties:
            Bucket: !Ref LambdaJudgeTestsBucket
            Events: s3:ObjectCreated:*
            Filter:
              S3Key:
                Rules:
                  - Name: suffix      # or prefix
                    Value: zip        # The value to search for in the S3 object key names
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt JudgeVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref PrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: '/mnt/efs'

  EqualityChecker:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: EqualityChecker
      MemorySize: 256
      Timeout: 300
      Runtime: python3.9
      CodeUri: judges/
      Handler: app.equality_checker_lambda
      Role: !GetAtt EqualityCheckerRole.Arn
      Events:
        Check:
          Type: Api # More info about API Event Source: https://github.com/awslabs/serverless-application-model/blob/master/versions/2016-10-31.md#api
          Properties:
            Path: /check
            Method: post

  CodeRunnerPython:
    Type: AWS::Serverless::Function
    DependsOn: CodeRunnerMountTarget
    Properties:
      FunctionName: CodeRunnerPython
      Timeout: 300
      MemorySize: 1769
      PackageType: Image
      Role: !GetAtt ContestantRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt JudgeVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref CodeRunnerPrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: '/mnt/efs'
    Metadata:
      DockerTag: python3.9-v1
      DockerContext: ./coderunners
      Dockerfile: python.Dockerfile

  CodeRunnerCpp:
    Type: AWS::Serverless::Function
    DependsOn: CodeRunnerMountTarget
    Properties:
      FunctionName: CodeRunnerCpp
      Timeout: 300
      MemorySize: 1769
      PackageType: Image
      Role: !GetAtt ContestantRole.Arn
      VpcConfig:
        SecurityGroupIds:
          - !GetAtt JudgeVPC.DefaultSecurityGroup
        SubnetIds:
          - !Ref CodeRunnerPrivateSubnet
      FileSystemConfigs:
        - Arn: !GetAtt AccessPointResource.Arn
          LocalMountPath: '/mnt/efs'
    Metadata:
      DockerTag: python3.9-v1
      DockerContext: ./coderunners
      Dockerfile: cpp.Dockerfile

Outputs:
  # ServerlessRestApi is an implicit API created out of Events key under Serverless::Function
  # Find out more about other implicit resources you can reference within SAM
  # https://github.com/awslabs/serverless-application-model/blob/master/docs/internals/generated_resources.rst#api
  Check:
    Description: 'API Gateway endpoint URL for Prod stage for EqualityChecker function'
    Value: !Sub 'https://${ServerlessRestApi}.execute-api.${AWS::Region}.amazonaws.com/Prod/check/'
  EqualityChecker:
    Description: 'AWS Lambda checker for determining if the output of a code is exactly the same es the target'
    Value: !GetAtt EqualityChecker.Arn
  CodeRunnerPython:
    Description: 'AWS Lambda for executing a python code and getting the outputs'
    Value: !GetAtt CodeRunnerPython.Arn
  CodeRunnerCpp:
    Description: 'AWS Lambda for executing a C++ code and getting the outputs'
    Value: !GetAtt CodeRunnerCpp.Arn
  SyncS3WithEFSName:
    Description: 'AWS Lambda for syncing S3 bucket for test cases with EFS'
    Value: !GetAtt SyncS3WithEFS.Arn
